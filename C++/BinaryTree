#include <stdio.h> 
#include <stdlib.h>
struct node{
	int data;
	struct node* left;
	struct node* right;
};
struct node* newNode(int data){
	struct node* node = (struct node*)malloc(sizeof(struct node));
	node->data = data;
	node->left = NULL;
	node->right = NULL;
	
	return(node);
};
struct node* Find(struct node* root, int data){
	if(root==NULL)
		return(NULL);
	if(data<root->data)
		return(Find(root->left,data));
	else if(data>root->data)
		return(Find(root->right,data));
	return(root);
};
void preOrder(struct node* root){
	if(root){
		printf("%d",root->data);
		preOrder(root->left);
		preOrder(root->right);
	}
}
void InOrder(struct node* root){
	if(root){
		InOrder(root->left);
		printf("%d",root->data);
		InOrder(root->right);	
	}
}
void PostOrder(struct node* root){
	if(root){
		PostOrder(root->left);
		PostOrder(root->right);
		printf("%d",root->data);
		
	}
}
struct node* Insert(struct node* root, int data){
	struct node* par;
	struct node* n = malloc(sizeof(struct node));
	n->left = NULL;
	n->data = data;
	n->right = NULL;
	if(root == NULL){
		root=n;
	}
	else{
		par=root;
		while(par!=NULL){
			if(par->data>data){
				if(par->left==NULL)
					par->left = n;
				par = par->left;
			}
			else if(par->data<data){
				if(par->right==NULL)
					par->right = n;
				par = par->right;
			}
		}
	}
	return(n);
}
int main(){
	int q;
	struct node* root = newNode(1);
	root->left = newNode(2);
	root->right = newNode(3);
	root->left->left = newNode(4);
	root->left->right = newNode(5);
	preOrder(root);
	printf("\n");
	InOrder(root);
	printf("\n");
	PostOrder(root);
	printf("\n");
	//q=Find(root,9);
	//printf("%d",q);
//	Insert(root,7);
	
	
}
